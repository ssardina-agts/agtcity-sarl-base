/** 
 * SARL-AGTCITY-BASE - Team controller for Agents in City Game
 * Copyright (C) 2018 Sebastian Sardina.

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.beliefs

import io.sarl.core.Logging

// Just in case you need to return pairs
import org.apache.commons.lang3.tuple.Pair
import org.apache.commons.lang3.tuple.MutablePair;

import java.util.ArrayList
import java.util.Collection


import eis.iilang.Percept

import io.sarl.extras.SWIJPL_KB_Prolog

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 */
capacity KB_AgtCity {
	def kb_load(file : String)
	def kb_dump()
	def kb_recordKBName(name : String)
	def kb_recordPercepts(playerName : String, stepNo : int, percepts : String)
	def kb_recordPercepts(playerName : String, stepNo : int, percepts : Collection<Percept>)
	def kb_processLastPercept(playerName : String)
	def kb_pickDestination(playerName : String) : String

	def kb_setLogLevel(logLevel : int)
}



/**
 * Skill for KB_AgtCity using SWI Prolog
 */
skill SWI_KB_AgtCity extends SWIJPL_KB_Prolog implements KB_AgtCity {
	uses Logging

	// Logging level for the skill
	var logLevel : int
	
	new (name : String, logLevel : int = 0, kb_dump_dir : String) {
		super(name, kb_dump_dir) // Call the super's constructor
		kb_setLogLevel(logLevel)
	}

	new (name : String, logLevel : int = 0) {
		super(name) // Call the super's constructor
		kb_setLogLevel(logLevel)
	}

	// For compatibility for old version
	@Deprecated
	new (logLevel : int = 0, name : String) {
		this(name, logLevel)
	}

	def kb_setLogLevel(logLevel : int) {
		this.logLevel = logLevel 
	}

	
	def kb_load(file : String) {
		consult(file)
	}

	def kb_dump() {
		dump_kb()
	}
	

	def kb_recordKBName(name : String) {
		assertFirst("player_name(?)", name)
	}

	def kb_recordPercepts(playerName : String, stepNo : int, percepts : String) {
		assertFirst("percepts(?, ?, ?)", playerName, stepNo, percepts)
		
	}

	def kb_recordPercepts(playerName : String, stepNo : int, percepts : Collection<Percept>) {
		val perceptsProlog : Collection<String> = new ArrayList<String>

		percepts.forEach[percept : Percept|perceptsProlog.add(percept.toProlog())]
		
		assertFirst("percepts(?, ?, ?)", playerName, stepNo, perceptsProlog.toString)
	}

	def kb_processLastPercept(playerName : String) {
		prove("process_last_percepts(?)", playerName)
	}

	def kb_pickDestination(playerName : String) : String {
		val solution = askOnce(String.format("choose_destination('%s', Destination)", playerName))
//		solution = askOnce("choose_destination(@S, Destination)", playerName)	// Using Mochalog query builder formatter
		
		if (solution !== null) return solution.get("Destination").name else return null
	}

	// Function invoked when the skill is installed in the owner.
	// You should put all the initialization statements in this block of code.
	def install {
		super.install	// Do the install of the higher class first.
		debug("Domain KB_AgtCity skill INSTALLED")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner.
		// You should put all the resource release statements in this block of code.
		debug("Domain KB_AgtCity skill UNINSTALLED")
	}

}
