/** 
 * SARL-MASSIM - Interface between the SARL agent-oriented language 
 * and the MASSIM RMIT 2018+ server
 * 
 * Copyright (C) 2017-2021 Sebastian Sardina - ssardina@gmail.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.agents.dummy

import au.edu.rmit.agtgrp.agtcity.sarl.beliefs.KB_AgtCity
import au.edu.rmit.agtgrp.agtcity.sarl.beliefs.SWI_KB_AgtCity
import au.edu.rmit.agtgrp.agtcity.sarl.events.E_MoveRandomly
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_MassimTalking
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_Reporting
import au.edu.rmit.agtgrp.agtcity.sarl.mw.skills.S_ConsoleReporting
import au.edu.rmit.agtgrp.agtcity.sarl.mw.skills.S_MassimTalking
import au.edu.rmit.agtgrp.agtcity.sarl.mw.utils.ConfHandler
import au.edu.rmit.agtgrp.util.KBDumpingDir
import au.edu.rmit.agtgrp.agtcity.sarl.utils.BootingConf

import eis.exceptions.PerceiveException
import eis.iilang.Action
import eis.iilang.EnvironmentState
import eis.iilang.Identifier
import eis.iilang.Percept

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules

import io.sarl.extras.KB_Prolog

import java.nio.file.Paths
import java.util.Collection
import java.nio.file.Path

event E_SenseEnvironment



/** 
 * This is a monolithic SARL agent to manage ALL the entity agents in the  game simulation.
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent SWISuperSingleAgent {
	uses Logging, Lifecycle, DefaultContextInteractions
	uses Schedules
	uses C_Reporting, C_MassimTalking
	uses KB_AgtCity, KB_Prolog // We can use KB_Prolog directly!
	

	var myName = this.class.simpleName
	val agentLogLevel = 4 // debug = 4 this is for the high-level agent, not for SARL
	val reportEILog = false // true if XML messages from server need to be printed out
	val reportState = true // Report current state of entity and state tracking

	// We allow SARL systems to have a directory to store configuration files or data
	// In this case it is very simple as that directory will just have the EI configuration file eismassimconfig.json
	// but more complex SARL systems can make use of various files to use at boot time
	// The EI configuration file contains info to connect entities to server: server info (port/host + options) & entities credentials
	var eiConfigurationDir : String // the configuration folder to be used (given by argument or asked to the user)
	var eiConfigurationFileName = "eismassimconfig.json" // fixed (should be inside the configuration dir)
	val eiConfigurationDirs = "conf" // the folder containing many configuration folders

	// Entities to register in the server and control
	var myConnectedEntities = #["entityA1", "entityA4"] 


	// Data kept by this single SARL agent: just the step number
	var last_step : int = -1
	val action_continue = new Action("continue")

	// Folders where Prolog KB are located by default and where to dump the KBs
	var kb_root_path = Paths.get("src/main/sarl/au/edu/rmit/agtgrp/agtcity/sarl/beliefs")
	var kb_dump_dir : Path  // directory where KB database is to be dumped

	/* 
	 * SARL agent is initialized 
	 * 
	 * The SARL agent may control one more more game entities (trucks, motorcycles, drones, etc).
	 * 
	 * To do so, the agent will install a S_MassimTalking skill, which allows the agent to talk to the game server.
	 * 
	 * The skill uses the Environment Interface (EI) for MASSIM which provides a high-level connection to the game server.
	 * The skill uses an EI server connection configuration file "eismassimconfig.json" containing all the server info and
	 * all entity connections available (including username/password to authenticate) 
	 * We can tell the skill to control an sense among those available entities defined in the file.
	 * 
	 * Different EI registration files can be kept in different folders under conf/
	 * 
	 * Agent may receive zero or one argument (via CLI argument).
	 * The argument states the directory where the EI config file "eismassimconfig.json" to be used is located.
	 * If no argument is given, possible sub-folders under conf/ are scanned and given to user for selection	  
	 */
	on Initialize { // Should only be initializing with the EIS as a parameter.
		var args = newArrayList(occurrence.parameters) // may receive a booting configuration object

		/** 
		 * 1. FIRST, collect the directory where the server configuration file eiRegistrationFile is located
		 * If none is given as CLI argument, search inside conf/ folder and make user select one
		 */
		if (args.length >= 1) { // a configuration booting object has been provided, use it!
			val bootingOptions = args.get(0) as BootingConf

			if (bootingOptions.myName !== null)
				myName = bootingOptions.myName
			if (bootingOptions.eiConfigurationDir !== null)
				eiConfigurationDir = bootingOptions.eiConfigurationDir
			if (bootingOptions.eiConfigurationFileName !== null)
				eiConfigurationFileName = bootingOptions.eiConfigurationFileName
			if (bootingOptions.connections !== null)
				myConnectedEntities = bootingOptions.connections
			if (bootingOptions.logDir !== null)
				kb_dump_dir = bootingOptions.logDir
		}
		if (eiConfigurationDir === null) // ask the user which EI configuration dir to use
			eiConfigurationDir = ConfHandler.getConfDir(eiConfigurationDirs) // ask user which folder in conf/ to use
		val eiConfigurationFile = Paths.get(eiConfigurationDir, eiConfigurationFileName)

		setLogLevel(agentLogLevel) // set debug level for Logging built-in capacity
		setLoggingName(myName)
		info("This is an INFO TEST message (level 3)....")
		warning("This is a WARNING TEST message (level 2)....")
		error("This is an ERROR TEST message (level 1)....")
		setSkill(new S_ConsoleReporting(myName), C_Reporting) // Give reporting skill via console to agent


		// Set the KB dumping directory: variable kb_dump_dir
		// If a parameter was provided at CLI, then use that. Otherwise, use kb_dump_SWISingle/<timestamp>
		if (kb_dump_dir === null) {
			KBDumpingDir.setRoot("kb_dump_SWISingle")		// set and create the KB dumping folder 
			if (!KBDumpingDir.exists) KBDumpingDir.create
			kb_dump_dir = KBDumpingDir.getPath()
		}
		debug("\n***************************************************\n" + 
				"Configuration settings:\n" + 
				"\t My SARL agent name: {0}\n" +
				"\t EI server connection configuration file: {1}\n" + 
				"\t Directory to dump KB: {2}\n" + 
				"\t Entities to be controlled: {3}\n" + 
				"***************************************************", 
			myName,
			eiConfigurationFile.toString,
			kb_dump_dir.toString, 
			myConnectedEntities.toString)
			
		try {
			/** 
			 * 2. SECOND, install Massim-Talking skill to talk to the  game server using EI registration file 
			 * (no actual connection to entities yet, just recording of registration file to be used)
			 */
			agent_says("PHASE 2: INSTALL MASSIM-TALKING SKILL WITH EI REGISTRATION FILE {0}", eiConfigurationFile)
			setSkill(new S_MassimTalking(eiConfigurationFile, reportEILog), C_MassimTalking)

			/** 
			 * 3. THIRD, configure the skill by providing which specific entities this SARL agent will control
			 * The entities to control have to be among those listed in the registration file
			 * No actual connection (or server authentication) happens at this step
			 */
			agent_says("PHASE 3: REGISTERING ENTITIES TO CONTROL: ", myConnectedEntities.toString)
			if (myConnectedEntities !== null)
				myConnectedEntities.forEach [ entityName : String | // entityA1, entityA2, .../entityAn
					MT_registerEntityByName(entityName) // register entities to control (no authentication yet)
					agent_says("I have registered entity **{0}** for control and perception.", entityName)
				]

			/** 
			 * 4. FOURTH, we establish the connection to the game server via the EI 
			 * 
			 * All entities registered for control are authenticated and connected to the server
			 */
			agent_says("PHASE 4: INITIALIZING CONNECTIONS {1} USING EI CONFIG FILE {0}", eiConfigurationFileName);
			if (MT_initialize()) {
				agent_says("The EI is now initialized, entities are being authenticated...")
			} else {
				agent_shouts("Something wrong when initializing the EI, I am finished...")
				killMe
			}

			/* 
			 * FIFTH, Set up a new Prolog belief base - load agent knowledge bases.
			 */
			setSkill(new SWI_KB_AgtCity(myName, 0, kb_dump_dir.toString))
			agent_says("My KB SWI module is: {0}", get_prolog_engine.toString()) // This will give the SWI module where this agent has its KB!
			kb_load(Paths.get(kb_root_path.toString, "tools.pl").toString)
			kb_load(Paths.get(kb_root_path.toString, "percept-mgmt.pl").toString)
			kb_load(Paths.get(kb_root_path.toString, "decision-making.pl").toString)
			agent_says("I have loaded all my knowledge bases!")
			assertFirst("agentName(?)", myName) // assert my name in the KB (using SWI_KB_Prolog skill directly)
			// kb_recordKBName(mySARLname)				// same but using the current KB domain capacity KB_AgtCity
			dump_kb() // Using Prolog-CAP directly
				

			// Store in the KB the names of the EI entitys we are controlling
			MT_getEntityNames.forEach [ entity : String | assertFirst("entity(?)", entity) ]

		
			/** 
			 * 6. SIXTH, finally with all entities registered and connected, emit an event to start 
			 * sensing and controlling those entities 
			 */
			agent_says("PHASE FINAL: Emit E_SenseEnvironment() to start sensing and acting")
			
		in(2000)[emit(new E_SenseEnvironment())] 	// wait 2 seconds to allow everyone to auhenticate to server
	} catch (e : Exception) {
		error("Sorry but I was not able to initialize the skill to talk to server! Message: {0}", e.message)
		e.printStackTrace()
		killMe
	}
}

	/* 
	 * Repetitively sense each registered and connected entity
	 */
	on E_SenseEnvironment [occurrence.fromMe] {
		agent_shouts("Start sensing the environment for the following entities I control: {0}", MT_getEntityNames)

		// While the environment is running, wait for new percepts (read percepts for each entity registered/connected)
		while (MT_getStatus() == EnvironmentState.RUNNING && !MT_getEntityNames().empty) {

			MT_getEntityNames().forEach([ entityName : String |

				// All percepts for the entity: (role/entity of agent --> collection of single percepts)
				// In this game, entitys usually are of one role/entity, so we will store that single set of percepts
				// in variable percepts (the first value of allPercepts)
				try {
					debug("About to sense percepts for step {0} in entity {0}", last_step + 1, entityName)
					var percepts : Collection<Percept>
					percepts = MT_senseEntityPercepts(entityName) // This is BLOCKING!!
					// TODO: Change this to debug log
					// var plist = percepts.stream().map([p | return p.name]).collect(Collectors.toList)
					// System.out.println(String.join(",", plist))
					agent_says("I have just sensed entity {0} at step {1}", entityName, MT_getStepNo())

					// Updating the entityState of the entity where percepts come from
					// ATTENTION: This step is already done by the MT once data is sensed, so it is technically not necessary
					// The skill S_MassimTalking already maintains and updates upon sensing a entityState object per connected entity
					// That state can be accessed via MT_getEntityState(entityName)
					// MT_updateentityState(entityName, percepts) // update the agent data

					kb_recordPercepts(entityName, MT_getStepNo(), percepts)
					kb_processLastPercept(entityName)
				

	
					// update the last step if the percept just processed has a higher step number
					last_step = MT_getStepNo()
					agent_shouts("I am finished sensing the environment for entity {1} at step {0}", last_step,
						entityName)
					emit(new E_MoveRandomly => [it.entityName = entityName]) 	// see compact way of assignment data in event

					

				} catch (e : PerceiveException) {
					agent_shouts("There was an error in perception ({0}), maybe not yet connected? Will try later...",
						e.message)
				} catch (e : Exception) {
					error("Something bad has happened during perception for entity **{0}**: {1}", entityName,
						e.toString)
					throw e
				}
			]) // FINISH sensing cycle for all entities - We have sensed every entity now
			agent_shouts(
				"Finished sensing the environment for all the entity connections. Next report and act for step {0}!!!",
				last_step)
		} 	// end of game & sensing finished
	} // end of on E_SenseEnvironment



	on E_MoveRandomly [occurrence.fromMe && reportState] {

		// 1. Report all the percepts/3 information available in the KB
		// val query = new Query("percepts(Agent, Step, Percepts)")	// no need to format query
		// for (solution : askForAllSolutions(query))
		// {
		// agent_says("There is percept information in KB for entity {0} on step {1}",
		// solution.get("Agent").toString(), solution.get("Step").intValue)
		// }
		// 2. Report current status of each entity from data in the KB
		MT_getEntityNames.forEach([ entity : String |
			
			val query = "get_entity_last_loc(?, Step, Lat, Long), get_entity_last_charge(?, Step, Charge)"
			val solution = askOnce(query, entity, entity)
			if (solution !== null) {
				agent_says(
					"entity **{0}** location is ({1},{2}) and charge is {3} at step {4}",
					entity,
					solution.get("Lat").floatValue,
					solution.get("Long").floatValue,
					solution.get("Charge").floatValue,
					solution.get("Step").intValue
				)
			} else {
				agent_says("I do not have self information for entity {0}", entity)
			}
		])

		// 3. Finally, save current KB to file (for the step)
		agent_says("I will dump all that I know so far....")
		dump_kb() 
	}

	// We are still traveling, just continue following the path...
	on E_MoveRandomly [occurrence.fromMe && kb_lengthRoute(occurrence.entityName) > 0] {
		val entityName = occurrence.entityName
		val stepsToGo = kb_lengthRoute(entityName)

		agent_says("Entity **{0}** is already traveling: {1} steps to go!", entityName, stepsToGo)

		if (!MT_executeAction(entityName, action_continue))
			warning("Could not perform continue for entity **{1}**", entityName)
	}
//
//
//	// We are NOT traveling: buy or go somewhere or wait 
	on E_MoveRandomly [occurrence.fromMe && MT_getEntityState(occurrence.entityName).routeLength == 0] {
		val entityName = occurrence.entityName

		// Pick some random facility and go!
		val destination = kb_pickDestination(entityName)
		
		if (destination !== null) {
			agent_says("I will send entity **{1}** to location {0}", destination, entityName)
			if (!MT_executeAction(entityName, new Action("goto", new Identifier(destination))))
				agent_shouts("Was not able to successfully send action goto({0}) for entity {1}", destination,
					entityName)
		} else {
			agent_shouts("I just don't know any facility to go yet, sorry...!")
		}
	}



	
}
// /////////////////////////////////////////////////
// END OF FILE
// /////////////////////////////////////////////////