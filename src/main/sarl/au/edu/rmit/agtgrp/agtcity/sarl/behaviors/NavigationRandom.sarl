/** 
 * SARL-AGTCITY-BASE - Team controller for Agents in City Game
 * Copyright (C) 2017-2021 The SARL-AGTCITY-BASE Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.behaviors

import au.edu.rmit.agtgrp.agtcity.sarl.events.E_EntitySensed
import io.sarl.core.Logging
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_Reporting
import au.edu.rmit.agtgrp.agtcity.sarl.mw.capacities.C_MassimTalking
import au.edu.rmit.agtgrp.agtcity.sarl.beliefs.KB_AgtCity
import io.sarl.core.Initialize
import eis.iilang.Identifier
import eis.iilang.Action

behavior NavigationRandom {
	uses Logging
	uses C_Reporting 
	uses C_MassimTalking
	uses KB_AgtCity // We can use KB_Prolog directly!

	val ACTION_CONTINUE = new Action("continue")
	

	on Initialize {
		info("The behavior was started.")
	}


	// We are still traveling, just continue following the path...
	on E_EntitySensed [occurrence.fromMe && kb_lengthRoute(occurrence.entityName) > 0] {
		val entityName = occurrence.entityName
		val stepsToGo = kb_lengthRoute(entityName)

		agent_says("Entity **{0}** is already traveling: {1} steps to go!", entityName, stepsToGo)

		if (!MT_executeAction(entityName, ACTION_CONTINUE))
			warning("Could not perform continue for entity **{1}**", entityName)
	}

	//	// We are NOT traveling: buy or go somewhere or wait
	on E_EntitySensed [occurrence.fromMe && MT_getEntityState(occurrence.entityName).routeLength == 0] {
		val entityName = occurrence.entityName

		agent_says("I will send {0} somewhere", entityName)

		// Pick some random facility and go!
		val destination = kb_pickDestination(entityName)

		if (destination !== null) {
			agent_says("I will send entity **{1}** to location {0}", destination, entityName)
			if (!MT_executeAction(entityName, new Action("goto", new Identifier(destination))))
				agent_shouts("Was not able to send action goto({0}) for entity {1}", destination, entityName)
		} else {
			agent_shouts("I just don't know any facility to go yet, sorry...!")
		}
	}

}
