/** 
 * SARL-AGTCITY-BASE - Team controller for Agents in City Game
 * Copyright (C) 2017 The SARL-AGTCITY-BASE Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.agents.dummy

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Destroy
import io.sarl.core.AgentSpawned
import java.util.Collection
import java.util.ArrayList
import java.util.HashSet
import java.util.Set
import java.util.UUID

import au.edu.rmit.agtgrp.agtcity.sarl.utils.PlayersManager
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import au.edu.rmit.agtgrp.util.TimestampedDir

/** 
 * This agent will spawn several single SWISingleFullAgents, each of the managing some subset
 * of the players in the simulation

 * @author Sebastian Sardina (ssardina@gmail.com) * 
 */
agent BootMultiSWIAgents {
    uses Lifecycle
    uses Logging

	val eiConfigFile = #["conf/SingleAgent/", "eismassimconfig.json"]
	val lock1 : Object = new Object()
	
	var teamManagers : Collection<PlayersManager> = new ArrayList<PlayersManager>()
	var agentsToComplete : Set<UUID> = new HashSet<UUID>() // set of all SARL agents in the system
	var noToSpawn : int	// total agents to spawn
	var noSpawn : int	// agents already spawn
	
     on Initialize {
		teamManagers.add(
			new PlayersManager("team1Manager", eiConfigFile.get(0), eiConfigFile.get(1), 
				#["connectionA1", "connectionA2", "connectionA3"]))
		teamManagers.
			add(new PlayersManager("team2Manager", eiConfigFile.get(0), eiConfigFile.get(1),
			#["connectionA4", "connectionA5", "connectionA6"]))


		// Set the directory where the KB will be dumped: kb_dump_BootMultiSWI/<timestamp>
		// all agents will dump in the same directory
		TimestampedDir.setRoot("kb_dump_BootMultiSWI")
		if (!TimestampedDir.exists) TimestampedDir.create

		
		noToSpawn = teamManagers.size
		noSpawn = 0
		teamManagers.forEach([ teamManager : PlayersManager |
			val UUID = spawn(SWISingleFullAgent, teamManager, TimestampedDir.getDir())
			synchronized (agentsToComplete) {
				agentsToComplete.add(UUID)
			}
		])
	}

	on AgentSpawned [!(occurrence.agentIdentifiers.get(0) == this.ID)]  {
		val agent_UUID = occurrence.agentIdentifiers.get(0)
		val agent_type = occurrence.agentType

		// This code gives validation error at compile, it should not!
		// // see bug report : https://github.com/sarl/sarl/issues/847
		// info("Agent {0} of type {1} has been created successfully and is now alive!",
		// occurrence.agentIdentifiers, occurrence.agentType)
		synchronized (agentsToComplete) {
			if (agentsToComplete.remove(agent_UUID)) {
				noSpawn++
				info("Agent {0} (no. {1}; type: {2}) has been created successfully and is now alive!", agent_UUID,
					noSpawn, agent_type)

				// No more to agents to wait, start sensing!
				if (agentsToComplete.empty && noSpawn == noToSpawn) {
					info("All {0} agents have now been created (BootMultiSWIAgents)", noSpawn)
					killMe
				}
			} else {
				warning("Strange, an agent {0} has spawned but I was not waiting for it....", agent_UUID, agent_type)
			}

		}
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Boot-Multi-SWI-Agents is now dying, have booted all agents, all done! Bye bye...")
	}

}



