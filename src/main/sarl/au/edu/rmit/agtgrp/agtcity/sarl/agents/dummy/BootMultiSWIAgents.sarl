/** 
 * SARL-AGTCITY-BASE - Team controller for Agents in City Game
 * Copyright (C) 2017 The SARL-AGTCITY-BASE Authors.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package au.edu.rmit.agtgrp.agtcity.sarl.agents.dummy

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Destroy
import io.sarl.core.AgentSpawned
import java.util.Collection
import java.util.ArrayList

/** 
 * This agent will spawn several single SWISingleFullAgents, each of the managing some subset
 * of the players in the simulation

 * @author Sebastian Sardina (ssardina@gmail.com) * 
 */
agent BootMultiSWIAgents {
    uses Lifecycle
    uses Logging

	var teamManagers : Collection<String[]> = new ArrayList<String[]>()
	var noSpawn : int
	val lock1 : Object = new Object()
	
     on Initialize {
		teamManagers.add(#["team1Manager", "conf/MultiAgents/", "eismassimconfig1.json", "agentsconfig1.json"])
		teamManagers.add(#["team2Manager", "conf/MultiAgents/", "eismassimconfig2.json", "agentsconfig2.json"])

		noSpawn = 0
		teamManagers.forEach([ teamManagerOptions : String[] |
			spawn(SWISingleFullAgent, teamManagerOptions)
		])

		// EQUIVALENT TO:		
		//	spawn(SWISingleFullAgent, "team1Manager", "conf/MultiAgents/", "eismassimconfig1.json", "agentsconfig1.json")
		// spawn(SWISingleFullAgent, "team2Manager", "conf/MultiAgents/", "eismassimconfig2.json", "agentsconfig2.json")
	}

	on AgentSpawned {
		val agent_ids = occurrence.agentIdentifiers
		val agent_type = occurrence.agentType
		info("An Agent {0} (of type: {1}) has been created successfully and is now alive!", agent_ids, agent_type)

		// This code gives validation error at compile, it should not!
		// // see bug report : https://github.com/sarl/sarl/issues/847
		// info("Agent {0} of type {1} has been created successfully and is now alive!",
		// occurrence.agentIdentifiers, occurrence.agentType)

		synchronized(lock1) {
			noSpawn++
		}
		if (noSpawn == teamManagers.length) {
			info("All agent have been created, now dying... From BootMultiSWIAgents, bye bye....")
			killMe
		}

	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Boot-Multi-SWI-Agents is now dying, have booted all agents, all done! Bye bye...")
	}

}



