package au.edu.rmit.agtgrp.util

import java.text.SimpleDateFormat
import java.util.Date
import java.nio.file.Path
import java.nio.file.Paths
import java.io.File

/**
 * An utility to manage folders with a timestamp in their name (e.g., to create set of logs or dumps)
 */
class TimestampedDir {
	static val formatter = new SimpleDateFormat("yyyy-MM-dd--HH-mm-ss")
	static var runtime_timestamp = formatter.format(new Date()) // store runtime date time as a string
	static var rootDir : String = "./"
	static var timestampedLogDir : String = String.format("%s/%s", rootDir, runtime_timestamp)

	/**
	 * Reset timestamp to date now!
	 */
	static def reset() {
		runtime_timestamp = formatter.format(new Date()) 
	}

	/* 
	 * Get the current timestamp of the the log dir 
	 */
	static def getTimestamp() : String {
		return runtime_timestamp
	}

	/* 
	 * Sets the root of the timestamped dir
	 * 
	 * @param rootDir the root folder
	 */
	static def setRoot(rootDir : String) : void {
		timestampedLogDir = String.format("%s/%s", rootDir, runtime_timestamp)
	}

	/* 
	 * Get the full nameof the timestamp folder
	 * 
	 * @return the full name of the timestamp folder
	 */
	static def getDir() : String {
		return timestampedLogDir
	}

	/* 
	 * Get current timestamp dir as a Path
	 * 
	 * @return the Path of the timestamp dir
	 */
	static def getPath() : Path {
		return Paths.get(timestampedLogDir)
	}

	/*
	 * Get a log dir with the rootDir as root (use stored runtime timestamp though)
	 */
	static def getDir(rootDir : String) : String {
		return String.format("%s/%s", rootDir, runtime_timestamp)
	}

	static def getPath(rootDir : String) : Path {
		return Paths.get(rootDir, runtime_timestamp)
	}

	/**
	 * Check if timestamp dir exists already
	 * 
	 * @return true if the timestamp dir exists
	 */
	static def exists() : boolean {
		return new File(timestampedLogDir).exists()
	}
	
	/**
	 * Create the timestamp dir if it does not exist
	 */
	static def create() {
		if (!exists()) new File(timestampedLogDir).mkdirs
	}



}
