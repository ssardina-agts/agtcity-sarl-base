import io.sarl.bootstrap.SRE

import io.sarl.lang.core.Agent
import java.util.Scanner
import au.edu.rmit.agtgrp.agtcity.sarl.utils.BootingConf
import java.util.ArrayList
import java.nio.file.Paths

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 */
@SuppressWarnings("all")
//@SuppressWarnings("potential_field_synchronization_problem")
class BootMAS {
	// Code adapted from example how to boot from name string: 	http://tinyurl.com/ycolmey5
	def static main(args : String[]) : void {
		var sre = SRE::bootstrap
		sre.verboseLevel = 7

		// Configuration of booting utility
		val basePackage = "au.edu.rmit.agtgrp.agtcity.sarl.agents"
		val AGENTS_AVAILABLE : String[] = #["default", "SuperSingleAgent", "SWISuperSingleAgent", "BootMultiSWIAgents"]
		val DEFAULT = "SuperSingleAgent"
		
		System.out.println(String.format("Default Controller is: %s", DEFAULT))


		// If agent has not been passed in CLI, ask the user for the agent to boot from available ones
		var agentToLaunch : String = DEFAULT
		if (args.length == 0) 
			agentToLaunch = getSelectionFromuser("Choose the controller to run: ", AGENTS_AVAILABLE)
		else 
			agentToLaunch = args.get(0) // get the agent name from CLI first argument

		// Calculate full qualified class for agent selected
		var fullyQualifiedAgent : String
		if(agentToLaunch == "default") agentToLaunch = DEFAULT
		fullyQualifiedAgent = String.format("%s.dummy.%s", basePackage, agentToLaunch)
		
		// Next, get agent class for fullQualifiedAgent
		System.out.println(String.format("Loading SARL controller agent: %s", fullyQualifiedAgent))
		val type = Class.forName(fullyQualifiedAgent)
		var SARLagent : Class<? extends Agent>
		SARLagent = type.asSubclass(Agent)
		assert SARLagent !== null;

		// Object to pass booting info
		var bootingConf = new BootingConf()

		// Arguments (optional) have been passed in CLI
		// First arg should be the directory where to grab the server connection configuration file "eismassimconfig.json"
		// The remaining arguments are the entities to control
		if (args.length >= 2) { // second CLI argument states which config dir has to be used to find 
			bootingConf.eiConfigurationDir = args.get(1);
			if (args.length >= 3) { 	// entities to connect have been given too
				var entitiesToConnect = new ArrayList<String>
		       	for (var i = 2; i < args.length; i++) 	// process entities to be controlled
					entitiesToConnect.add(args.get(i))
				bootingConf.connections = entitiesToConnect
			}
		}
		bootingConf.kbRootPath = Paths.get(System.getProperty("kb", "src/main/sarl/au/edu/rmit/agtgrp/agtcity/sarl/beliefs/")) 
		// Finally boot the agent and pass booting object as argument
		sre.startAgent(SARLagent, bootingConf)
	}

	/**
	 * Given a set of options, present them with a message and ask user which one; return the option string
	 */
	static def getSelectionFromuser(message : String, options : String[]) : String {
		System.out.println(message);
	            for (var i = 0; i < options.size; i++) {
			System.out.println(String.format("%d. %s", i + 1, options.get(i)))
		}
		val in : Scanner = new Scanner(System.in)
		var confNum : Integer = null
		while (confNum === null) {
			try {
				confNum = Integer.parseInt(in.next())
				if (confNum < 1 || confNum > options.size) {
					System.out.println("No option for that number, try again:")
			                confNum = null
			                }
			} catch (e : Exception) {
				System.out.println("Invalid number, try again:")
			}
		}
		return options.get(confNum.intValue - 1)
	}

}
